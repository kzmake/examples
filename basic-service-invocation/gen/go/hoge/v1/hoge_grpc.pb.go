// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hoge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HogeClient is the client API for Hoge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HogeClient interface {
	Fuga(ctx context.Context, in *FugaRequest, opts ...grpc.CallOption) (*FugaResponse, error)
}

type hogeClient struct {
	cc grpc.ClientConnInterface
}

func NewHogeClient(cc grpc.ClientConnInterface) HogeClient {
	return &hogeClient{cc}
}

func (c *hogeClient) Fuga(ctx context.Context, in *FugaRequest, opts ...grpc.CallOption) (*FugaResponse, error) {
	out := new(FugaResponse)
	err := c.cc.Invoke(ctx, "/basic.hoge.v1.Hoge/Fuga", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HogeServer is the server API for Hoge service.
// All implementations must embed UnimplementedHogeServer
// for forward compatibility
type HogeServer interface {
	Fuga(context.Context, *FugaRequest) (*FugaResponse, error)
	mustEmbedUnimplementedHogeServer()
}

// UnimplementedHogeServer must be embedded to have forward compatible implementations.
type UnimplementedHogeServer struct {
}

func (UnimplementedHogeServer) Fuga(context.Context, *FugaRequest) (*FugaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fuga not implemented")
}
func (UnimplementedHogeServer) mustEmbedUnimplementedHogeServer() {}

// UnsafeHogeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HogeServer will
// result in compilation errors.
type UnsafeHogeServer interface {
	mustEmbedUnimplementedHogeServer()
}

func RegisterHogeServer(s grpc.ServiceRegistrar, srv HogeServer) {
	s.RegisterService(&Hoge_ServiceDesc, srv)
}

func _Hoge_Fuga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FugaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HogeServer).Fuga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basic.hoge.v1.Hoge/Fuga",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HogeServer).Fuga(ctx, req.(*FugaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hoge_ServiceDesc is the grpc.ServiceDesc for Hoge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hoge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basic.hoge.v1.Hoge",
	HandlerType: (*HogeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fuga",
			Handler:    _Hoge_Fuga_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hoge/v1/hoge.proto",
}
