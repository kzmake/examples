// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fuga

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FugaClient is the client API for Fuga service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FugaClient interface {
	Piyo(ctx context.Context, in *PiyoRequest, opts ...grpc.CallOption) (*PiyoResponse, error)
}

type fugaClient struct {
	cc grpc.ClientConnInterface
}

func NewFugaClient(cc grpc.ClientConnInterface) FugaClient {
	return &fugaClient{cc}
}

func (c *fugaClient) Piyo(ctx context.Context, in *PiyoRequest, opts ...grpc.CallOption) (*PiyoResponse, error) {
	out := new(PiyoResponse)
	err := c.cc.Invoke(ctx, "/basic.fuga.v1.Fuga/Piyo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FugaServer is the server API for Fuga service.
// All implementations must embed UnimplementedFugaServer
// for forward compatibility
type FugaServer interface {
	Piyo(context.Context, *PiyoRequest) (*PiyoResponse, error)
	mustEmbedUnimplementedFugaServer()
}

// UnimplementedFugaServer must be embedded to have forward compatible implementations.
type UnimplementedFugaServer struct {
}

func (UnimplementedFugaServer) Piyo(context.Context, *PiyoRequest) (*PiyoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Piyo not implemented")
}
func (UnimplementedFugaServer) mustEmbedUnimplementedFugaServer() {}

// UnsafeFugaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FugaServer will
// result in compilation errors.
type UnsafeFugaServer interface {
	mustEmbedUnimplementedFugaServer()
}

func RegisterFugaServer(s grpc.ServiceRegistrar, srv FugaServer) {
	s.RegisterService(&Fuga_ServiceDesc, srv)
}

func _Fuga_Piyo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PiyoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FugaServer).Piyo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basic.fuga.v1.Fuga/Piyo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FugaServer).Piyo(ctx, req.(*PiyoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fuga_ServiceDesc is the grpc.ServiceDesc for Fuga service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fuga_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basic.fuga.v1.Fuga",
	HandlerType: (*FugaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Piyo",
			Handler:    _Fuga_Piyo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fuga/v1/fuga.proto",
}
