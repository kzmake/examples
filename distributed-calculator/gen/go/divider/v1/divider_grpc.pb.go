// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package divider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DividerClient is the client API for Divider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DividerClient interface {
	Div(ctx context.Context, in *DivRequest, opts ...grpc.CallOption) (*DivResponse, error)
}

type dividerClient struct {
	cc grpc.ClientConnInterface
}

func NewDividerClient(cc grpc.ClientConnInterface) DividerClient {
	return &dividerClient{cc}
}

func (c *dividerClient) Div(ctx context.Context, in *DivRequest, opts ...grpc.CallOption) (*DivResponse, error) {
	out := new(DivResponse)
	err := c.cc.Invoke(ctx, "/distributedcalculator.divider.v1.Divider/Div", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DividerServer is the server API for Divider service.
// All implementations must embed UnimplementedDividerServer
// for forward compatibility
type DividerServer interface {
	Div(context.Context, *DivRequest) (*DivResponse, error)
	mustEmbedUnimplementedDividerServer()
}

// UnimplementedDividerServer must be embedded to have forward compatible implementations.
type UnimplementedDividerServer struct {
}

func (UnimplementedDividerServer) Div(context.Context, *DivRequest) (*DivResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Div not implemented")
}
func (UnimplementedDividerServer) mustEmbedUnimplementedDividerServer() {}

// UnsafeDividerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DividerServer will
// result in compilation errors.
type UnsafeDividerServer interface {
	mustEmbedUnimplementedDividerServer()
}

func RegisterDividerServer(s grpc.ServiceRegistrar, srv DividerServer) {
	s.RegisterService(&Divider_ServiceDesc, srv)
}

func _Divider_Div_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DivRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DividerServer).Div(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distributedcalculator.divider.v1.Divider/Div",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DividerServer).Div(ctx, req.(*DivRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Divider_ServiceDesc is the grpc.ServiceDesc for Divider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Divider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distributedcalculator.divider.v1.Divider",
	HandlerType: (*DividerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Div",
			Handler:    _Divider_Div_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "divider/v1/divider.proto",
}
