// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package secondhand

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecondHandClient is the client API for SecondHand service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecondHandClient interface {
	Now(ctx context.Context, in *NowRequest, opts ...grpc.CallOption) (*NowResponse, error)
}

type secondHandClient struct {
	cc grpc.ClientConnInterface
}

func NewSecondHandClient(cc grpc.ClientConnInterface) SecondHandClient {
	return &secondHandClient{cc}
}

func (c *secondHandClient) Now(ctx context.Context, in *NowRequest, opts ...grpc.CallOption) (*NowResponse, error) {
	out := new(NowResponse)
	err := c.cc.Invoke(ctx, "/daprclock.secondhand.v1.SecondHand/Now", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecondHandServer is the server API for SecondHand service.
// All implementations must embed UnimplementedSecondHandServer
// for forward compatibility
type SecondHandServer interface {
	Now(context.Context, *NowRequest) (*NowResponse, error)
	mustEmbedUnimplementedSecondHandServer()
}

// UnimplementedSecondHandServer must be embedded to have forward compatible implementations.
type UnimplementedSecondHandServer struct {
}

func (UnimplementedSecondHandServer) Now(context.Context, *NowRequest) (*NowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Now not implemented")
}
func (UnimplementedSecondHandServer) mustEmbedUnimplementedSecondHandServer() {}

// UnsafeSecondHandServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecondHandServer will
// result in compilation errors.
type UnsafeSecondHandServer interface {
	mustEmbedUnimplementedSecondHandServer()
}

func RegisterSecondHandServer(s grpc.ServiceRegistrar, srv SecondHandServer) {
	s.RegisterService(&SecondHand_ServiceDesc, srv)
}

func _SecondHand_Now_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecondHandServer).Now(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daprclock.secondhand.v1.SecondHand/Now",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecondHandServer).Now(ctx, req.(*NowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecondHand_ServiceDesc is the grpc.ServiceDesc for SecondHand service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecondHand_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daprclock.secondhand.v1.SecondHand",
	HandlerType: (*SecondHandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Now",
			Handler:    _SecondHand_Now_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secondhand/v1/secondhand.proto",
}
