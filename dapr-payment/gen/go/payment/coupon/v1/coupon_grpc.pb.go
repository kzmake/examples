// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package coupon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CouponServiceClient is the client API for CouponService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CouponServiceClient interface {
	GetCoupon(ctx context.Context, in *GetCouponRequest, opts ...grpc.CallOption) (*Coupon, error)
	ListCoupons(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Coupon, error)
	UseCoupon(ctx context.Context, in *UseCouponRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancellCoupon(ctx context.Context, in *CancellCouponRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type couponServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCouponServiceClient(cc grpc.ClientConnInterface) CouponServiceClient {
	return &couponServiceClient{cc}
}

func (c *couponServiceClient) GetCoupon(ctx context.Context, in *GetCouponRequest, opts ...grpc.CallOption) (*Coupon, error) {
	out := new(Coupon)
	err := c.cc.Invoke(ctx, "/payment.coupon.v1.CouponService/GetCoupon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) ListCoupons(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Coupon, error) {
	out := new(Coupon)
	err := c.cc.Invoke(ctx, "/payment.coupon.v1.CouponService/ListCoupons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) UseCoupon(ctx context.Context, in *UseCouponRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/payment.coupon.v1.CouponService/UseCoupon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) CancellCoupon(ctx context.Context, in *CancellCouponRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/payment.coupon.v1.CouponService/CancellCoupon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouponServiceServer is the server API for CouponService service.
// All implementations must embed UnimplementedCouponServiceServer
// for forward compatibility
type CouponServiceServer interface {
	GetCoupon(context.Context, *GetCouponRequest) (*Coupon, error)
	ListCoupons(context.Context, *emptypb.Empty) (*Coupon, error)
	UseCoupon(context.Context, *UseCouponRequest) (*emptypb.Empty, error)
	CancellCoupon(context.Context, *CancellCouponRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCouponServiceServer()
}

// UnimplementedCouponServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCouponServiceServer struct {
}

func (UnimplementedCouponServiceServer) GetCoupon(context.Context, *GetCouponRequest) (*Coupon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoupon not implemented")
}
func (UnimplementedCouponServiceServer) ListCoupons(context.Context, *emptypb.Empty) (*Coupon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoupons not implemented")
}
func (UnimplementedCouponServiceServer) UseCoupon(context.Context, *UseCouponRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseCoupon not implemented")
}
func (UnimplementedCouponServiceServer) CancellCoupon(context.Context, *CancellCouponRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancellCoupon not implemented")
}
func (UnimplementedCouponServiceServer) mustEmbedUnimplementedCouponServiceServer() {}

// UnsafeCouponServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouponServiceServer will
// result in compilation errors.
type UnsafeCouponServiceServer interface {
	mustEmbedUnimplementedCouponServiceServer()
}

func RegisterCouponServiceServer(s grpc.ServiceRegistrar, srv CouponServiceServer) {
	s.RegisterService(&CouponService_ServiceDesc, srv)
}

func _CouponService_GetCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).GetCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.coupon.v1.CouponService/GetCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).GetCoupon(ctx, req.(*GetCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_ListCoupons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).ListCoupons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.coupon.v1.CouponService/ListCoupons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).ListCoupons(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_UseCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).UseCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.coupon.v1.CouponService/UseCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).UseCoupon(ctx, req.(*UseCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_CancellCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancellCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).CancellCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/payment.coupon.v1.CouponService/CancellCoupon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).CancellCoupon(ctx, req.(*CancellCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CouponService_ServiceDesc is the grpc.ServiceDesc for CouponService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CouponService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.coupon.v1.CouponService",
	HandlerType: (*CouponServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoupon",
			Handler:    _CouponService_GetCoupon_Handler,
		},
		{
			MethodName: "ListCoupons",
			Handler:    _CouponService_ListCoupons_Handler,
		},
		{
			MethodName: "UseCoupon",
			Handler:    _CouponService_UseCoupon_Handler,
		},
		{
			MethodName: "CancellCoupon",
			Handler:    _CouponService_CancellCoupon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment/coupon/v1/coupon.proto",
}
